from telebot import types
import sqlite3
import phonenumbers

from config import *
# from create_db import create_table_users
from function_error import program_error
from delete_keyboard import delete_reply_markup


# create_table_users()


# –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.message_handler(commands=['start', 'logout', 'me', 'add_statement', 'my_statements', 'edit_statement', 'edit_user', 'add_administration'])
def current_command(message):
    delete_reply_markup(message=message)
    if message.text == '/start':
        return start_command(message=message)
    elif message.text == '/logout':
        return logout_command(message=message)
    elif message.text == '/me':
        return me_command(message=message)
    elif message.text == '/my_statements':
        return my_statements_command(message=message)
    elif message.text == '/add_statement':
        return start_register(message=message)
    elif message.text == '/edit_statement':
        return edit_statement_command(message=message)
    elif message.text == '/edit_user':
        return edit_user_command(message=message)
    elif message.text == '/add_administration':
        return add_administration_command(message=message)


# —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–∞ –≤—Ö–æ–¥–∞
def start_command(message, do_edit_message=False):
    try:
        chat_id = message.chat.id
        connection = sqlite3.connect('./data_bases/statements_to_work.sqlite3')
        cursor = connection.cursor()
        cursor.execute("SELECT is_login FROM users WHERE tg_chat_id == ('%d');" % (int(chat_id)))
        do_exit = cursor.fetchone()
        cursor.close()
        connection.close()
        if do_exit and do_exit[0]:
            return logout_command(message=message)
        else:
            users[chat_id] = User()

            markup_inline = types.InlineKeyboardMarkup()
            markup_inline.add(types.InlineKeyboardButton(text='üö™ –í–æ–π—Ç–∏', callback_data='sign_up'),
                              types.InlineKeyboardButton(text='‚ñ∂ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è', callback_data='log_in'))

            if do_edit_message:
                bot.edit_message_text(chat_id=chat_id, message_id=message.message_id,
                                      text='üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –∂–µ–ª–∞–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è?',
                                      reply_markup=markup_inline)
            else:
                bot.send_message(chat_id=chat_id,
                                 text='üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –∂–µ–ª–∞–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É –∏–ª–∏ –∑–∞—Ä–∞–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è?',
                                 reply_markup=markup_inline)
    except Exception as e:
        return program_error(message=message, text_hint=str(e) + ' /(–æ—à–∏–±–∫–∞ –Ω–∞ —Å—Ç–∞–¥–∏–∏ –≤—ã–±–æ—Ä–∞ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É).')


# —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –æ–∫–Ω–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–æ–∫–Ω–æ –≤–≤–æ–¥–∞ –ª–æ–≥–∏–Ω–∞)
def log_in_in_system(message, do_edit_message=False):
    try:
        chat_id = message.chat.id

        markup_inline = types.InlineKeyboardMarkup()
        markup_inline.add(types.InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data='back_to_start'))

        if do_edit_message:
            bot.edit_message_text(chat_id=chat_id, message_id=message.message_id,
                                  text='‚ñ∂ –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –±—É–¥–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º–µ –≤ –±—É–¥—É—â–µ–º, '
                                       '–Ω–∞–ø—Ä–∏–º–µ—Ä \"<b>user1234</b>\".', parse_mode='html', reply_markup=markup_inline)
        else:
            bot.send_message(chat_id=chat_id,
                             text='‚ñ∂ –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –±—É–¥–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º–µ –≤ –±—É–¥—É—â–µ–º, '
                                  '–Ω–∞–ø—Ä–∏–º–µ—Ä \"<b>user1234</b>\".', parse_mode='html', reply_markup=markup_inline)
        bot.register_next_step_handler(message, register_user_password)
    except Exception as e:
        return program_error(message=message, text_hint=str(e) + ' /(–æ—à–∏–±–∫–∞ –Ω–∞ —Å—Ç–∞–¥–∏–∏ –≤–≤–æ–¥–∞ –ª–æ–≥–∏–Ω–∞ (–ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏)).',
                             do_add_button_back=False)


# –æ–∫–Ω–æ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è
def register_user_password(message):
    try:
        chat_id = message.chat.id
        if message.text in commands_list:
            return current_command(message=message)
        elif ' ' in message.text:
            markup_inline = types.InlineKeyboardMarkup()
            markup_inline.add(types.InlineKeyboardButton(text='üîó –ü–æ–¥–¥–µ—Ä–∂–∫–∞', url=link_back))
            markup_inline.add(types.InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data='back_to_start'))
            bot.send_message(chat_id=chat_id,
                             text=f'‚õî –í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ª–æ–≥–∏–Ω –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤.',
                             parse_mode='html', reply_markup=markup_inline)

            bot.register_next_step_handler(message, register_user_password)
        elif '\'--' in message.text:
            markup_inline = types.InlineKeyboardMarkup()
            markup_inline.add(types.InlineKeyboardButton(text='üîó –ü–æ–¥–¥–µ—Ä–∂–∫–∞', url=link_back))
            markup_inline.add(types.InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data='back_to_start'))
            bot.send_message(chat_id=chat_id,
                             text=f'‚õî –í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ª–æ–≥–∏–Ω.',
                             parse_mode='html', reply_markup=markup_inline)

            bot.register_next_step_handler(message, register_user_password)
        elif message.text:
            connection = sqlite3.connect('./data_bases/statements_to_work.sqlite3')
            cursor = connection.cursor()
            cursor.execute("SELECT user_login FROM users WHERE user_login == ('%s');" % (str(message.text)))
            login_overlap = cursor.fetchone()
            connection.commit()
            cursor.close()
            connection.close()
            if login_overlap:
                markup_inline = types.InlineKeyboardMarkup()
                markup_inline.add(types.InlineKeyboardButton(text='üîó –ü–æ–¥–¥–µ—Ä–∂–∫–∞', url=link_back))

                bot.send_message(chat_id=chat_id,
                                 text='üö® –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –ª–æ–≥–∏–Ω.',
                                 reply_markup=markup_inline)
                bot.register_next_step_handler(message, register_user_password)
            else:
                markup_inline = types.InlineKeyboardMarkup()
                markup_inline.add(types.InlineKeyboardButton(text='üîÅ –í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π –ª–æ–≥–∏–Ω', callback_data='log_in'))

                bot.send_message(chat_id=chat_id,
                                 text='‚ñ∂ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –±—É–¥–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º–µ –≤ –±—É–¥—É—â–µ–º.',
                                 reply_markup=markup_inline)
                bot.register_next_step_handler(message, add_user_to_users, register_login=(message.text).strip())
        else:
            markup_inline = types.InlineKeyboardMarkup()
            markup_inline.add(types.InlineKeyboardButton(text='üîó –ü–æ–¥–¥–µ—Ä–∂–∫–∞', url=link_back))

            bot.send_message(chat_id=chat_id,
                             text='üö® –í–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ª–æ–≥–∏–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ª–æ–≥–∏–Ω.',
                             reply_markup=markup_inline)
            bot.register_next_step_handler(message, register_user_password)
    except Exception as e:
        return program_error(message=message, text_hint=str(e) + ' /(–æ—à–∏–±–∫–∞ –Ω–∞ —Å—Ç–∞–¥–∏–∏ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è (–ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏)).',
                             do_add_button_back=False)


# –¥–æ–≤–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
def add_user_to_users(message, register_login=None):
    chat_id = message.chat.id
    try:
        if message.text in commands_list:
            return current_command(message=message)
        elif message.text:
            new_user_password = message.text.strip()

            connection = sqlite3.connect('./data_bases/statements_to_work.sqlite3')
            cursor = connection.cursor()

            cursor.execute("INSERT INTO users (user_login, user_password) VALUES ('%s', '%s');"
                           % (str(register_login), str(new_user_password)))

            connection.commit()
            cursor.close()
            connection.close()
            bot.send_message(chat_id=chat_id, text=f'üéâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>{register_login}</b> —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω! '
                                                   f'–í–∞—à –ø–∞—Ä–æ–ª—å: <b>{new_user_password}</b>.\n\n'
                                                   f''
                                                   f'üÜî –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.',
                             parse_mode='html')
            return sign_up_in_system(message=message, do_edit_message=False)

        else:
            markup_inline = types.InlineKeyboardMarkup()
            markup_inline.add(types.InlineKeyboardButton(text='üîó –ü–æ–¥–¥–µ—Ä–∂–∫–∞', url=link_back))

            bot.send_message(chat_id=chat_id,
                             text='üö® –í–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–∞—Ä–æ–ª—è. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–∞—Ä–æ–ª—å.',
                             reply_markup=markup_inline)
            bot.register_next_step_handler(message, add_user_to_users, register_login=register_login)

    except Exception as e:
        return program_error(message=message,
                             text_hint=str(
                                 e) + ' /(–æ—à–∏–±–∫–∞ –Ω–∞ —Å—Ç–∞–¥–∏–∏ –∑–∞–Ω–µ—Å–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)).',
                             do_add_button_back=False)


# —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –æ–∫–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–æ–∫–Ω–æ –≤–≤–æ–¥–∞ –ª–æ–≥–∏–Ω–∞)
def sign_up_in_system(message, do_edit_message=False):
    try:
        chat_id = message.chat.id
        users[chat_id] = User()

        markup_inline = types.InlineKeyboardMarkup()
        markup_inline.add(types.InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data='back_to_start'))

        if do_edit_message:
            bot.edit_message_text(chat_id=chat_id, message_id=message.message_id,
                                  text='üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é.\n'
                                       '–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ª–æ–≥–∏–Ω, —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä \"<b>user1234</b>\":',
                                  parse_mode='html', reply_markup=markup_inline)
        else:
            bot.send_message(chat_id=chat_id,
                             text='üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n'
                                  '–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ª–æ–≥–∏–Ω, —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä \"<b>user1234</b>\":',
                             parse_mode='html', reply_markup=markup_inline)
        bot.register_next_step_handler(message, enter_user_login)
    except Exception as e:
        return program_error(message=message, text_hint=str(e) + ' /(–æ—à–∏–±–∫–∞ –Ω–∞ —Å—Ç–∞–¥–∏–∏ –Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏).',
                             do_add_button_back=False)


# –æ–∫–Ω–æ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è
def enter_user_login(message):
    chat_id = message.chat.id
    try:
        if not message.text:
            markup_inline = types.InlineKeyboardMarkup()
            markup_inline.add(types.InlineKeyboardButton(text='üîó –ü–æ–¥–¥–µ—Ä–∂–∫–∞', url=link_back))
            markup_inline.add(types.InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data='back_to_start'))
            bot.send_message(chat_id=chat_id,
                             text=f'‚õî –í–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ª–æ–≥–∏–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ª–æ–≥–∏–Ω.',
                             parse_mode='html', reply_markup=markup_inline)

            bot.register_next_step_handler(message, enter_user_login)
        elif message.text in commands_list:
            return current_command(message=message)
        elif ' ' in message.text:
            markup_inline = types.InlineKeyboardMarkup()
            markup_inline.add(types.InlineKeyboardButton(text='üîó –ü–æ–¥–¥–µ—Ä–∂–∫–∞', url=link_back))
            markup_inline.add(types.InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data='back_to_start'))
            bot.send_message(chat_id=chat_id,
                             text=f'‚õî –í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ª–æ–≥–∏–Ω –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤.',
                             parse_mode='html', reply_markup=markup_inline)

            bot.register_next_step_handler(message, enter_user_login)
        elif '\'--' in message.text:
            markup_inline = types.InlineKeyboardMarkup()
            markup_inline.add(types.InlineKeyboardButton(text='üîó –ü–æ–¥–¥–µ—Ä–∂–∫–∞', url=link_back))
            markup_inline.add(types.InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data='back_to_start'))
            bot.send_message(chat_id=chat_id,
                             text=f'‚õî –Ø –∑–Ω–∞—é, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Å—Ç–∏ SQL-–∏–Ω—ä–µ–∫—Ü–∏—é... –£ –í–∞—Å —ç—Ç–æ–≥–æ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è —Å–¥–µ–ª–∞—Ç—å!',
                             parse_mode='html', reply_markup=markup_inline)

            bot.register_next_step_handler(message, enter_user_login)
        else:
            current_login = message.text

            connection = sqlite3.connect('./data_bases/statements_to_work.sqlite3')
            cursor = connection.cursor()

            cursor.execute("SELECT user_login FROM users WHERE user_login == ('%s');" % str(current_login))
            logins = cursor.fetchone()

            if logins:
                markup_inline = types.InlineKeyboardMarkup()
                markup_inline.add(types.InlineKeyboardButton(text='üîÅ –í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π –ª–æ–≥–∏–Ω', callback_data='sign_up'))
                bot.send_message(chat_id=chat_id,
                                 text=f'‚úî –†–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞, <b>{current_login}</b>! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ø–∞—Ä–æ–ª—å.',
                                 parse_mode='html', reply_markup=markup_inline)
                bot.register_next_step_handler(message, enter_user_password, user_login=current_login)
            else:
                markup_inline = types.InlineKeyboardMarkup()
                markup_inline.add(types.InlineKeyboardButton(text='üîó –ü–æ–¥–¥–µ—Ä–∂–∫–∞', url=link_back))
                markup_inline.add(types.InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data='back_to_start'))
                bot.send_message(chat_id=chat_id,
                                 text='‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ! '
                                      '–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.',
                                 parse_mode='html', reply_markup=markup_inline)
                bot.register_next_step_handler(message, enter_user_login)

            connection.commit()
            cursor.close()
            connection.close()

    except Exception as e:
        return program_error(message=message, text_hint=str(e) + ' /(–æ—à–∏–±–∫–∞ –Ω–∞ —Å—Ç–∞–¥–∏–∏ –≤–≤–æ–¥–∞ –ª–æ–≥–∏–Ω–∞ (–ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)).',
                             do_add_button_back=False)


# –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–∞–Ω–Ω—ã–º –ª–æ–≥–∏–Ω–æ–º –∏ –ø–∞—Ä–æ–ª–µ–º
def enter_user_password(message, user_login=None):
    chat_id = message.chat.id
    try:
        if not message.text:
            markup_inline = types.InlineKeyboardMarkup()
            markup_inline.add(types.InlineKeyboardButton(text='üîó –ü–æ–¥–¥–µ—Ä–∂–∫–∞', url=link_back))
            markup_inline.add(
                types.InlineKeyboardButton(text='üîô –í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π –ª–æ–≥–∏–Ω', callback_data='input_other_login'))

            bot.send_message(chat_id=chat_id,
                             text=f'‚õî –í–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–∞—Ä–æ–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–∞—Ä–æ–ª—å.',
                             parse_mode='html', reply_markup=markup_inline)

            bot.register_next_step_handler(message, enter_user_password, user_login=user_login)
        elif message.text in commands_list:
            return current_command(message=message)
        elif ' ' in message.text:
            markup_inline = types.InlineKeyboardMarkup()
            markup_inline.add(types.InlineKeyboardButton(text='üîó –ü–æ–¥–¥–µ—Ä–∂–∫–∞', url=link_back))
            markup_inline.add(
                types.InlineKeyboardButton(text='üîô –í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π –ª–æ–≥–∏–Ω', callback_data='input_other_login'))
            bot.send_message(chat_id=chat_id,
                             text=f'‚õî –í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–∞—Ä–æ–ª—å –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤.',
                             parse_mode='html', reply_markup=markup_inline)

            bot.register_next_step_handler(message, enter_user_password, user_login=user_login)
        elif '\'--' in message.text:
            markup_inline = types.InlineKeyboardMarkup()
            markup_inline.add(types.InlineKeyboardButton(text='üîó –ü–æ–¥–¥–µ—Ä–∂–∫–∞', url=link_back))
            markup_inline.add(
                types.InlineKeyboardButton(text='üîô –í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π –ª–æ–≥–∏–Ω', callback_data='input_other_login'))

            bot.send_message(chat_id=chat_id,
                             text=f'‚õî –í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–∞—Ä–æ–ª—å.',
                             parse_mode='html', reply_markup=markup_inline)

            bot.register_next_step_handler(message, enter_user_password, user_login=user_login)
        else:
            current_password = message.text

            connection = sqlite3.connect('./data_bases/statements_to_work.sqlite3')
            cursor = connection.cursor()
            cursor.execute(
                "SELECT user_id, user_login, user_type, tg_chat_id FROM users WHERE user_login == ('%s') AND user_password == ('%s');"
                % (str(user_login), str(current_password)))
            user_password = cursor.fetchone()

            if user_password:
                users[chat_id].user_login = user_password[1]
                if user_password[3] == default_tg_chat_id:
                    cursor.execute("UPDATE users SET is_login = True, tg_chat_id = ('%d') WHERE user_id == ('%d');" % (
                        int(chat_id), int(user_password[0])))
                else:
                    cursor.execute(
                        "INSERT INTO users (user_login, user_password, user_type, is_login, tg_chat_id) VALUES ('%s', '%s', '%s', True, '%d');"
                        % (str(user_password[1]), str(current_password), str(user_password[2]), int(chat_id)))
                connection.commit()
                cursor.close()
                connection.close()
                return add_statement_command(message=message, is_start_bot=True)
            else:
                markup_inline = types.InlineKeyboardMarkup()
                markup_inline.add(types.InlineKeyboardButton(text='üîó –ü–æ–¥–¥–µ—Ä–∂–∫–∞', url=link_back))
                markup_inline.add(
                    types.InlineKeyboardButton(text='üîô –í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π –ª–æ–≥–∏–Ω', callback_data='input_other_login'))

                bot.send_message(chat_id=chat_id,
                                 text=f'‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>{user_login}</b> —Å —Ç–∞–∫–∏–º –ø–∞—Ä–æ–ª–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ! '
                                      '–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–∞—Ä–æ–ª—å –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.',
                                 parse_mode='html', reply_markup=markup_inline)

                bot.register_next_step_handler(message, enter_user_password, user_login=user_login)
    except Exception as e:
        return program_error(message=message, text_hint=str(e) + ' /(–æ—à–∏–±–∫–∞ –Ω–∞ —Å—Ç–∞–¥–∏–∏ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è (–ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)).',
                             do_add_button_back=False)


def logout_command(message):
    try:
        chat_id = message.chat.id
        connection = sqlite3.connect('./data_bases/statements_to_work.sqlite3')
        cursor = connection.cursor()

        cursor.execute("SELECT is_login, user_login FROM users WHERE tg_chat_id == ('%d');" % (int(chat_id)))
        is_user_login_from_db = cursor.fetchone()

        connection.commit()
        cursor.close()
        connection.close()

        if not is_user_login_from_db:
            markup_inline = types.InlineKeyboardMarkup()
            markup_inline.add(types.InlineKeyboardButton(text='‚ñ∂ –î–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è', callback_data='log_in'),
                              types.InlineKeyboardButton(text='‚ùå –ù–µ—Ç, –æ—Å—Ç–∞—Ç—å—Å—è', callback_data='back_to_start'))
            bot.send_message(chat_id=chat_id,
                             text=f'–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ! –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è?',
                             reply_markup=markup_inline)
        elif is_user_login_from_db[0] == False:
            markup_inline = types.InlineKeyboardMarkup()
            markup_inline.add(types.InlineKeyboardButton(text='üö™ –î–∞, –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É', callback_data='sign_in'),
                              types.InlineKeyboardButton(text='‚ùå –ù–µ—Ç, –æ—Å—Ç–∞—Ç—å—Å—è', callback_data='back_to_start'))
            bot.send_message(chat_id=chat_id,
                             text=f'–í—ã –Ω–µ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É! –í–æ–π—Ç–∏?',
                             reply_markup=markup_inline)
        else:
            markup_inline = types.InlineKeyboardMarkup()
            markup_inline.add(types.InlineKeyboardButton(text='üî¥ –î–∞, –≤—ã–π—Ç–∏ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è', callback_data='log_out'),
                              types.InlineKeyboardButton(text='üü¢ –ù–µ—Ç, –æ—Å—Ç–∞—Ç—å—Å—è', callback_data='stay_on_system'))
            bot.send_message(chat_id=chat_id,
                             text=f'–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è <b>{is_user_login_from_db[1]}</b>?',
                             parse_mode='html', reply_markup=markup_inline)
    except Exception as e:
        return program_error(message=message, text_hint=str(e) + ' /(–æ—à–∏–±–∫–∞ –Ω–∞ —Å—Ç–∞–¥–∏–∏ –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è).',
                             do_add_button_back=False)


def me_command(message):
    try:
        chat_id = message.chat.id
        info = (f'<b>–í–∞—à–µ –∏–º—è –≤ Telegram:</b> {message.from_user.first_name}\n'
                f'<b>–í–∞—à TelegramID:</b> {message.from_user.id}\n')

        connection = sqlite3.connect('./data_bases/statements_to_work.sqlite3')
        cursor = connection.cursor()
        cursor.execute("SELECT user_login, user_password FROM users WHERE tg_chat_id == ('%d');" % (int(chat_id)))
        is_user_login_from_db = cursor.fetchone()
        cursor.close()
        connection.close()

        if is_user_login_from_db:
            info += (f'<b>–í–∞—à –ª–æ–≥–∏–Ω –≤ —Å–∏—Å—Ç–µ–º–µ:</b> {is_user_login_from_db[0]}\n'
                     f'<b>–í–∞—à –ø–∞—Ä–æ–ª—å –æ—Ç –ø—Ä–æ—Ñ–∏–ª—è {is_user_login_from_db[0]}:</b> {is_user_login_from_db[1]}')

        bot.send_message(chat_id=chat_id, text=info, parse_mode='html')
    except Exception as e:
        return program_error(message=message, text_hint=str(e) + ' /(–æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ).',
                             do_add_button_back=False)


def add_statement_command(message, do_edit_message=False, is_start_bot=False):
    try:
        chat_id = message.chat.id
        connection = sqlite3.connect('./data_bases/statements_to_work.sqlite3')
        cursor = connection.cursor()

        cursor.execute("SELECT is_login, user_login FROM users WHERE tg_chat_id == ('%d');" % (int(chat_id)))
        is_user_login_from_db = cursor.fetchone()

        cursor.close()
        connection.close()

        if not is_user_login_from_db:
            markup_inline = types.InlineKeyboardMarkup()
            markup_inline.add(types.InlineKeyboardButton(text='‚ñ∂ –î–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è', callback_data='log_in'),
                              types.InlineKeyboardButton(text='‚ùå –ù–µ—Ç, –æ—Å—Ç–∞—Ç—å—Å—è', callback_data='back_to_start'))
            bot.send_message(chat_id=chat_id,
                             text=f'–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ! –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è?',
                             reply_markup=markup_inline)
        else:
            if is_start_bot:
                if do_edit_message:
                    bot.edit_message_text(chat_id=chat_id, message_id=message.message_id,
                                          text=f'üëÆ‚Äç‚ôÇÔ∏è \t–ë–ª–∞–≥–æ–¥–∞—Ä–Ω—ã –í–∞–º –∑–∞ —Ç–æ, —á—Ç–æ –ø—Ä–æ—è–≤–∏–ª–∏ –∂–µ–ª–∞–Ω–∏–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Å–ª—É–∂–±—É –≤ –û–í–î –†–§! üëÆ‚Äç‚ôÄÔ∏è\n'
                                               f'‚úç \t–ß—Ç–æ–±—ã –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –∫–æ–º–∞–Ω–¥—É \"/add_statement\".',
                                          parse_mode='html')
                else:
                    bot.send_message(chat_id=chat_id,
                                     text=f'üëÆ‚Äç‚ôÇÔ∏è \t–ë–ª–∞–≥–æ–¥–∞—Ä–Ω—ã –í–∞–º –∑–∞ —Ç–æ, —á—Ç–æ –ø—Ä–æ—è–≤–∏–ª–∏ –∂–µ–ª–∞–Ω–∏–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Å–ª—É–∂–±—É –≤ –û–í–î –†–§! üëÆ‚Äç‚ôÄÔ∏è\n'
                                          f'‚úç \t–ß—Ç–æ–±—ã –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –∫–æ–º–∞–Ω–¥—É \"/add_statement\".',
                                     parse_mode='html')
            # return my_statements_command(message=message)
    except Exception as e:
        return program_error(message=message, text_hint=str(e) + ' /(–æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é).',
                             do_add_button_back=False)


def my_statements_command(message, do_edit_message=False):
    try:
        chat_id = message.chat.id

        connection = sqlite3.connect('./data_bases/statements_to_work.sqlite3')
        cursor = connection.cursor()

        cursor.execute("SELECT is_login, user_login FROM users WHERE tg_chat_id == ('%d');" % (int(chat_id)))
        is_user_login_from_db = cursor.fetchone()

        cursor.close()
        connection.close()

        if not is_user_login_from_db:
            markup_inline = types.InlineKeyboardMarkup()
            markup_inline.add(types.InlineKeyboardButton(text='‚ñ∂ –î–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è', callback_data='log_in'),
                              types.InlineKeyboardButton(text='‚ùå –ù–µ—Ç, –æ—Å—Ç–∞—Ç—å—Å—è', callback_data='back_to_start'))
            bot.send_message(chat_id=chat_id,
                             text=f'–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ! –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è?',
                             reply_markup=markup_inline)
        else:
            connection = sqlite3.connect('./data_bases/statements_to_work.sqlite3')
            cursor = connection.cursor()
            cursor.execute("SELECT user_id FROM users WHERE tg_chat_id == ('%d')" % (int(chat_id)))
            current_user = cursor.fetchone()

            cursor.execute("SELECT user_name, user_age, user_telephone, user_address, user_edu, "
                           "user_is_legal, user_language, user_ill, user_administration, user_department "
                           "FROM statements "
                           "WHERE from_user == ('%d');" % (int(current_user[0])))
            all_statements_from_user = cursor.fetchall()

            cursor.close()
            connection.close()
            if all_statements_from_user:
                info = '–í–∞—à–∏ –∑–∞—è–≤–ª–µ–Ω–∏—è:\n\n'
                for statement in all_statements_from_user:
                    info += (f'<b>–ò–º—è</b>: <u>{statement[0]}</u>, <b>–í–æ–∑—Ä–∞—Å—Ç</b>: <u>{statement[1]}</u>, <b>–¢–µ–ª–µ—Ñ–æ–Ω</b>: <u>{statement[2]}</u>, '
                             f'<b>–ê–¥—Ä–µ—Å –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è</b>: <u>{statement[3]}</u>, <b>–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ</b>: <u>{statement[4]}</u>, '
                             f'<b>–Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ</b>: <u>{bool_to_text[statement[5]]}</u>, <b>–†—É—Å—Å–∫–∏–π</b>: <u>{bool_to_text[statement[6]]}</u>, '
                             f'<b>–ó–∞–±–æ–ª–µ–≤–∞–Ω–∏—è</b>: <u>{bool_to_text[statement[7]]}</u>, <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ</b>: <u>{statement[8]}</u>, '
                             f'<b>–û—Ç–¥–µ–ª</b>: <u>{statement[9]}</u>\n-\n')
                info = (info.rstrip())[:-2] + '\n\n'
            else:
                info = '–£ –í–∞—Å –Ω–µ—Ç –ø–æ–¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–ª–µ–Ω–∏–π. –î–ª—è –ø–æ–¥–∞—á–∏ –Ω–æ–≤–æ–≥–æ –∑–∞—è–≤–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É \"/add_statement\".'

            if do_edit_message:
                bot.edit_message_text(chat_id=chat_id, message_id=message.message_id, text=info, parse_mode='html')
            else:
                bot.send_message(chat_id=chat_id, text=info, parse_mode='html')
    except Exception as e:
        return program_error(message=message,
                             text_hint=str(e) + ' /(–æ—à–∏–±–∫–∞ –Ω–∞ —Å—Ç–∞–¥–∏–∏ –Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞—è–≤–ª–µ–Ω–∏—è).',
                             do_add_button_back=True)


def start_register(message):
    try:
        chat_id = message.chat.id

        connection = sqlite3.connect('./data_bases/statements_to_work.sqlite3')
        cursor = connection.cursor()

        cursor.execute("SELECT is_login, user_login FROM users WHERE tg_chat_id == ('%d');" % (int(chat_id)))
        is_user_login_from_db = cursor.fetchone()

        cursor.close()
        connection.close()

        if not is_user_login_from_db:
            markup_inline = types.InlineKeyboardMarkup()
            markup_inline.add(types.InlineKeyboardButton(text='‚ñ∂ –î–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è', callback_data='log_in'),
                              types.InlineKeyboardButton(text='‚ùå –ù–µ—Ç, –æ—Å—Ç–∞—Ç—å—Å—è', callback_data='back_to_start'))
            bot.send_message(chat_id=chat_id,
                             text=f'–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ! –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è?',
                             reply_markup=markup_inline)
        else:
            bot.send_message(chat_id=chat_id, text='–£–∫–∞–∂–∏—Ç–µ –í–∞—à–µ –§–ò–û (–ø–æ—Å–ª–µ–¥–Ω–µ–µ - –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏).')
            bot.register_next_step_handler(message, user_name)
    except Exception as e:
        return program_error(message=message,
                             text_hint=str(e) + ' /(–æ—à–∏–±–∫–∞ –Ω–∞ —Å—Ç–∞–¥–∏–∏ –Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞—è–≤–ª–µ–Ω–∏—è).',
                             do_add_button_back=True)


def user_name(message):
    try:
        chat_id = message.chat.id
        if not message.text:
            bot.send_message(chat_id=chat_id, text='–í–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–º–µ–Ω–∏.\n'
                                                   '–£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–º–µ–Ω–∏...')
            bot.register_next_step_handler(message, user_name)
        elif message.text in commands_list:
            return current_command(message=message)
        else:
            users[chat_id] = User()
            users[chat_id].user_name = message.text
            bot.send_message(chat_id=chat_id, text='–£–∫–∞–∂–∏—Ç–µ –í–∞—à –≤–æ–∑—Ä–∞—Å—Ç.')
            bot.register_next_step_handler(message, user_age)
    except Exception as e:
        return program_error(message=message,
                             text_hint=str(e) + ' /(–æ—à–∏–±–∫–∞ –Ω–∞ —Å—Ç–∞–¥–∏–∏ –≤–≤–æ–¥–∞ –§–ò–û (–ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–ª–µ–Ω–∏—è)).',
                             do_add_button_back=True)


def user_age(message):
    try:
        chat_id = message.chat.id
        if not message.text:
            bot.send_message(chat_id=chat_id, text='–í–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–æ–∑—Ä–∞—Å—Ç–∞.\n'
                                                   '–£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–æ–∑—Ä–∞—Å—Ç–∞...')
            bot.register_next_step_handler(message, user_age)
        elif message.text in commands_list:
            return current_command(message=message)
        elif (message.text.isdigit()) and (str(message.text)[0] != '0') and len(message.text) <= 2:
            users[chat_id].user_age = int(message.text)
            bot.send_message(chat_id=chat_id, text='–£–∫–∞–∂–∏—Ç–µ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ \"8–•–•–•–•–•–•–•–•–•–•\" –∏–ª–∏ \"+7–•–•–•–•–•–•–•–•–•–•\").')
            bot.register_next_step_handler(message, user_telephone)
        else:
            bot.send_message(chat_id=chat_id, text='–í–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–æ–∑—Ä–∞—Å—Ç–∞.\n'
                                                   '–£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–æ–∑—Ä–∞—Å—Ç–∞...')
            bot.register_next_step_handler(message, user_age)
    except Exception as e:
        return program_error(message=message,
                             text_hint=str(e) + ' /(–æ—à–∏–±–∫–∞ –Ω–∞ —Å—Ç–∞–¥–∏–∏ –≤–≤–æ–¥–∞ –í–æ–∑—Ä–∞—Å—Ç–∞ (–ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–ª–µ–Ω–∏—è)).',
                             do_add_button_back=True)


def user_telephone(message):
    try:
        chat_id = message.chat.id
        if not message.text:
            bot.send_message(chat_id=chat_id, text='–í–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n'
                                                   '–£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞...')
            bot.register_next_step_handler(message, user_telephone)
        elif message.text in commands_list:
            return current_command(message=message)
        elif message.text.isdigit() and phonenumbers.is_valid_number(phonenumbers.parse(number=message.text, region="RU")):
            users[chat_id].user_telephone = str(message.text)
            bot.send_message(chat_id=chat_id, text='–£–∫–∞–∂–∏—Ç–µ –í–∞—à –∞–¥—Ä–µ—Å –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ \"–û–±–ª–∞—Å—Ç—å, –≥–æ—Ä–æ–¥, —É–ª–∏—Ü–∞, –¥–æ–º\").')
            bot.register_next_step_handler(message, user_address)
        else:
            bot.send_message(chat_id=chat_id, text='–í–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n'
                                                   '–£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞...')
            bot.register_next_step_handler(message, user_telephone)
    except Exception as e:
        return program_error(message=message,
                             text_hint=str(e) + ' /(–æ—à–∏–±–∫–∞ –Ω–∞ —Å—Ç–∞–¥–∏–∏ –≤–≤–æ–¥–∞ –¢–µ–ª–µ—Ñ–æ–Ω–∞ (–ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–ª–µ–Ω–∏—è)).',
                             do_add_button_back=True)


def user_address(message):
    try:
        chat_id = message.chat.id
        if not message.text:
            bot.send_message(chat_id=chat_id, text='–í–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è.\n'
                                                   '–£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è...')
            bot.register_next_step_handler(message, user_address)
        elif message.text in commands_list:
            return current_command(message=message)
        elif (len(message.text.split(',')) == 4 and
              not (message.text.split(',')[0].strip().isdigit()) and
              not (message.text.split(',')[1].strip().isdigit()) and
              not (message.text.split(',')[2].strip().isdigit()) and
              (message.text.split(',')[3].strip().isdigit())):

            users[chat_id].user_address = message.text

            current_button = []
            help_list = []
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True,
                                               one_time_keyboard=True,
                                               input_field_placeholder='–£–∫–∞–∂–∏—Ç–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ...',
                                               is_persistent=True,
                                               row_width=5)
            for buttons in range(len(types_of_education)):
                current_button.append(types.KeyboardButton(text=str(types_of_education[buttons])))
                help_list.append(str(types_of_education[buttons]))
            markup.add(*current_button)
            bot.send_message(chat_id=chat_id, text='–£–∫–∞–∂–∏—Ç–µ –í–∞—à–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ.', reply_markup=markup)
            bot.register_next_step_handler(message, user_edu, help_list=help_list)
        else:
            bot.send_message(chat_id=chat_id, text='–í–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è.\n'
                                                   '–£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è...')
            bot.register_next_step_handler(message, user_address)
    except Exception as e:
        return program_error(message=message,
                             text_hint=str(e) + ' /(–æ—à–∏–±–∫–∞ –Ω–∞ —Å—Ç–∞–¥–∏–∏ –≤–≤–æ–¥–∞ –ê–¥—Ä–µ—Å–∞ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è (–ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–ª–µ–Ω–∏—è)).',
                             do_add_button_back=True)


def user_edu(message, help_list=None):
    try:
        chat_id = message.chat.id
        if not message.text:
            bot.send_message(chat_id=chat_id, text='–í–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏.\n'
                                                   '–£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –í–∞—à–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ...')
            bot.register_next_step_handler(message, user_edu, help_list=help_list)
        elif message.text in commands_list:
            return current_command(message=message)
        elif message.text in help_list:
            users[chat_id].user_edu = message.text
            if message.text == '–í–û':
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True,
                                                   one_time_keyboard=True,
                                                   input_field_placeholder='–£ –í–∞—Å —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ?',
                                                   is_persistent=True,
                                                   row_width=2)
                markup.add(types.KeyboardButton(text='–î–∞'), types.KeyboardButton(text='–ù–µ—Ç'))

                bot.send_message(chat_id=chat_id, text='–Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –í–∞—à–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–º?', reply_markup=markup)
                bot.register_next_step_handler(message, user_is_legal)
            else:
                users[chat_id].user_is_legal = False

                markup = types.ReplyKeyboardMarkup(resize_keyboard=True,
                                                   one_time_keyboard=True,
                                                   input_field_placeholder='–í–ª–∞–¥–µ–µ—Ç–µ –ª–∏ –í—ã —Ä—É—Å—Å–∫–∏–º —è–∑—ã–∫–æ–º?',
                                                   is_persistent=True,
                                                   row_width=2)
                markup.add(types.KeyboardButton(text='–î–∞'), types.KeyboardButton(text='–ù–µ—Ç'))

                bot.send_message(chat_id=chat_id, text='–í–ª–∞–¥–µ–µ—Ç–µ –ª–∏ –í—ã —Ä—É—Å—Å–∫–∏–º —è–∑—ã–∫–æ–º?', reply_markup=markup)
                bot.register_next_step_handler(message, user_language)
        else:
            bot.send_message(chat_id=chat_id, text='–í–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏.\n'
                                                   '–£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –í–∞—à–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ...')
            bot.register_next_step_handler(message, user_edu, help_list=help_list)
    except Exception as e:
        return program_error(message=message,
                             text_hint=str(e) + ' /(–æ—à–∏–±–∫–∞ –Ω–∞ —Å—Ç–∞–¥–∏–∏ –≤–≤–æ–¥–∞ –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è (–ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–ª–µ–Ω–∏—è)).',
                             do_add_button_back=True)


def user_is_legal(message):
    try:
        chat_id = message.chat.id
        if not message.text:
            bot.send_message(chat_id=chat_id, text='–í–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞.\n'
                                                   '–£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –í–∞—à–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–º...')
            bot.register_next_step_handler(message, user_is_legal)
        elif message.text in commands_list:
            return current_command(message=message)
        elif message.text.lower() == '–¥–∞' or message.text.lower() == '–Ω–µ—Ç':
            if message.text.lower() == '–¥–∞':
                users[chat_id].user_is_legal = True
            elif message.text.lower() == '–Ω–µ—Ç':
                users[chat_id].user_is_legal = False

            markup = types.ReplyKeyboardMarkup(resize_keyboard=True,
                                               one_time_keyboard=True,
                                               input_field_placeholder='–í–ª–∞–¥–µ–µ—Ç–µ –ª–∏ –í—ã —Ä—É—Å—Å–∫–∏–º —è–∑—ã–∫–æ–º?',
                                               is_persistent=True,
                                               row_width=2)
            markup.add(types.KeyboardButton(text='–î–∞'), types.KeyboardButton(text='–ù–µ—Ç'))

            bot.send_message(chat_id=chat_id, text='–í–ª–∞–¥–µ–µ—Ç–µ –ª–∏ –í—ã —Ä—É—Å—Å–∫–∏–º —è–∑—ã–∫–æ–º?', reply_markup=markup)
            bot.register_next_step_handler(message, user_language)
        else:
            bot.send_message(chat_id=chat_id, text='–í–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞.\n'
                                                   '–£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –í–∞—à–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–º...')
            bot.register_next_step_handler(message, user_is_legal)
    except Exception as e:
        return program_error(message=message,
                             text_hint=str(e) + ' /(–æ—à–∏–±–∫–∞ –Ω–∞ —Å—Ç–∞–¥–∏–∏ –£—Ç–æ—á–Ω–µ–Ω–∏—è —Ç–∏–ø–∞ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è (–ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–ª–µ–Ω–∏—è)).',
                             do_add_button_back=True)


def user_language(message):
    try:
        chat_id = message.chat.id
        if not message.text:
            bot.send_message(chat_id=chat_id, text='–í–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞.\n'
                                                   '–£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–ª–∞–¥–µ–µ—Ç–µ –ª–∏ –í—ã —Ä—É—Å—Å–∫–∏–º —è–∑—ã–∫–æ–º...')
            bot.register_next_step_handler(message, user_language)
        elif message.text in commands_list:
            return current_command(message=message)
        elif message.text.lower() == '–¥–∞' or message.text.lower() == '–Ω–µ—Ç':
            if message.text.lower() == '–¥–∞':
                users[chat_id].user_language = True
            elif message.text.lower() == '–Ω–µ—Ç':
                users[chat_id].user_language = False

            markup = types.ReplyKeyboardMarkup(resize_keyboard=True,
                                               one_time_keyboard=True,
                                               input_field_placeholder='–ï—Å—Ç—å –ª–∏ —É –í–∞—Å —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è?',
                                               is_persistent=True,
                                               row_width=2)
            markup.add(types.KeyboardButton(text='–î–∞'), types.KeyboardButton(text='–ù–µ—Ç'))

            bot.send_message(chat_id=chat_id, text='–ï—Å—Ç—å –ª–∏ —É –í–∞—Å —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è?', reply_markup=markup)
            bot.register_next_step_handler(message, user_ill)
        else:
            bot.send_message(chat_id=chat_id, text='–í–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞.\n'
                                                   '–£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–ª–∞–¥–µ–µ—Ç–µ –ª–∏ –í—ã —Ä—É—Å—Å–∫–∏–º —è–∑—ã–∫–æ–º...')
            bot.register_next_step_handler(message, user_language)
    except Exception as e:
        return program_error(message=message,
                             text_hint=str(e) + ' /(–æ—à–∏–±–∫–∞ –Ω–∞ —Å—Ç–∞–¥–∏–∏ –≤–≤–æ–¥–∞ –Ø–∑—ã–∫–∞ (–ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–ª–µ–Ω–∏—è)).',
                             do_add_button_back=True)


def user_ill(message):
    try:
        chat_id = message.chat.id
        if not message.text:
            bot.send_message(chat_id=chat_id, text='–í–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞.\n'
                                                   '–£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –µ—Å—Ç—å –ª–∏ —É –í–∞—Å —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è...')
            bot.register_next_step_handler(message, user_ill)
        elif message.text in commands_list:
            return current_command(message=message)
        elif message.text.lower() == '–¥–∞' or message.text.lower() == '–Ω–µ—Ç':
            if message.text.lower() == '–¥–∞':
                users[chat_id].user_ill = True
            elif message.text.lower() == '–Ω–µ—Ç':
                users[chat_id].user_ill = False

            connection = sqlite3.connect('./data_bases/statements_to_work.sqlite3')
            cursor = connection.cursor()
            cursor.execute("SELECT officer_administration FROM officers GROUP BY officer_administration;")
            administrations = cursor.fetchall()
            cursor.close()
            connection.close()

            buttons_administration = []
            help_list = []
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True,
                                               one_time_keyboard=True,
                                               input_field_placeholder='–í—ã–±–µ—Ä–∏—Ç–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ...',
                                               is_persistent=True,
                                               row_width=3)
            for current_administration in administrations:
                buttons_administration.append(types.KeyboardButton(text=str(current_administration[0])))
                help_list.append(str(current_administration[0]).lower())
            markup.add(*buttons_administration)

            bot.send_message(chat_id=chat_id, text='–í –∫–∞–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏–µ?', reply_markup=markup)
            bot.register_next_step_handler(message, user_administration, help_list=help_list)
        else:
            bot.send_message(chat_id=chat_id, text='–í–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞.\n'
                                                   '–£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –µ—Å—Ç—å –ª–∏ —É –í–∞—Å —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è...')
            bot.register_next_step_handler(message, user_ill)
    except Exception as e:
        return program_error(message=message,
                             text_hint=str(e) + ' /(–æ—à–∏–±–∫–∞ –Ω–∞ —Å—Ç–∞–¥–∏–∏ –≤–≤–æ–¥–∞ –ó–∞–±–æ–ª–µ–≤–∞–Ω–∏–π (–ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–ª–µ–Ω–∏—è)).',
                             do_add_button_back=True)


def user_administration(message, help_list=None):
    try:
        chat_id = message.chat.id
        if not message.text:
            bot.send_message(chat_id=chat_id, text='–ù–µ—Ç —Ç–∞–∫–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.\n'
                                                   '–£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–¥–Ω–æ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏–π, –∫—É–¥–∞ –í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏–µ...')
            bot.register_next_step_handler(message, user_administration)
        elif message.text in commands_list:
            return current_command(message=message)
        elif message.text.lower() in help_list:
            users[chat_id].user_administration = message.text

            connection = sqlite3.connect('./data_bases/statements_to_work.sqlite3')
            cursor = connection.cursor()
            cursor.execute("SELECT officer_department FROM officers GROUP BY officer_department;")
            departments = cursor.fetchall()
            cursor.close()
            connection.close()

            buttons_department = []
            help_list = []
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True,
                                               one_time_keyboard=True,
                                               input_field_placeholder='–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª...',
                                               is_persistent=True,
                                               row_width=3)
            for current_department in departments:
                buttons_department.append(types.KeyboardButton(text=str(current_department[0])))
                help_list.append(str(current_department[0]).lower())
            markup.add(*buttons_department)

            bot.send_message(chat_id=chat_id, text='–í –∫–∞–∫–æ–π –æ—Ç–¥–µ–ª –í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏–µ?', reply_markup=markup)
            bot.register_next_step_handler(message, user_department, help_list=help_list)
        else:
            bot.send_message(chat_id=chat_id, text='–ù–µ—Ç —Ç–∞–∫–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.\n'
                                                   '–£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–¥–Ω–æ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏–π, –∫—É–¥–∞ –í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏–µ...')
            bot.register_next_step_handler(message, user_administration)
    except Exception as e:
        return program_error(message=message,
                             text_hint=str(e) + ' /(–æ—à–∏–±–∫–∞ –Ω–∞ —Å—Ç–∞–¥–∏–∏ –≤–≤–æ–¥–∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–ª–µ–Ω–∏—è)).',
                             do_add_button_back=True)


def user_department(message, help_list=None):
    try:
        chat_id = message.chat.id
        if not message.text:
            bot.send_message(chat_id=chat_id, text='–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –æ—Ç–¥–µ–ª–∞ –≤ –¥–∞–Ω–Ω–æ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏.\n'
                                                   '–£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ—Ç–¥–µ–ª–æ–≤, –∫—É–¥–∞ –í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏–µ...')
            bot.register_next_step_handler(message, user_department)
        elif message.text in commands_list:
            return current_command(message=message)
        elif message.text.lower() in help_list:
            users[chat_id].user_department = message.text
            return check_user_statement(message=message)
        else:
            bot.send_message(chat_id=chat_id, text='–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –æ—Ç–¥–µ–ª–∞ –≤ –¥–∞–Ω–Ω–æ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏.\n'
                                                   '–£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ—Ç–¥–µ–ª–æ–≤, –∫—É–¥–∞ –í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏–µ...')
            bot.register_next_step_handler(message, user_department)
    except Exception as e:
        return program_error(message=message,
                             text_hint=str(e) + ' /(–æ—à–∏–±–∫–∞ –Ω–∞ —Å—Ç–∞–¥–∏–∏ –≤–≤–æ–¥–∞ –û—Ç–¥–µ–ª–∞ (–ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–ª–µ–Ω–∏—è)).',
                             do_add_button_back=True)


def check_user_statement(message):
    try:
        chat_id = message.chat.id
        delete_reply_markup(message=message)

        markup_inline = types.InlineKeyboardMarkup()
        markup_inline.add(types.InlineKeyboardButton(text='‚úî –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏–µ', callback_data='send_statement'),
                          types.InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É', callback_data='leave_statement'))
        bot.send_message(chat_id=chat_id,
                         text=f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –∫–æ—Ç–æ—Ä—É—é –≤—ã –∂–µ–ª–∞–µ—Ç–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å:\n\n'
                              f''
                              f'<b>–§–ò–û</b>: {users[chat_id].user_name}\n'
                              f'<b>–í–æ–∑—Ä–∞—Å—Ç</b>: {users[chat_id].user_age}\n'
                              f'<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>: {users[chat_id].user_telephone}\n'
                              f'<b>–ê–¥—Ä–µ—Å –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è</b>: {users[chat_id].user_address}\n'
                              f'<b>–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ</b>: {users[chat_id].user_edu}\n'
                              f'<b>–ï—Å—Ç—å –ª–∏ –≤—ã—Å—à–µ–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ</b>: {bool_to_text[users[chat_id].user_is_legal]}\n'
                              f'<b>–í–ª–∞–¥–µ–µ—Ç–µ –ª–∏ —Ä—É—Å—Å–∫–∏–º —è–∑—ã–∫–æ–º</b>: {bool_to_text[users[chat_id].user_language]}\n'
                              f'<b>–ï—Å—Ç—å –ª–∏ —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è</b>: {bool_to_text[users[chat_id].user_ill]}\n'
                              f'<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ</b>: {users[chat_id].user_administration}\n'
                              f'<b>–û—Ç–¥–µ–ª</b>: {users[chat_id].user_department}\n\n'
                              f''
                              f'–ñ–µ–ª–∞–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –æ—Ç–¥–µ–ª?',
                         parse_mode='html',
                         reply_markup=markup_inline)
    except Exception as e:
        return program_error(message=message,
                             text_hint=str(e) + ' /(–æ—à–∏–±–∫–∞ –Ω–∞ —Å—Ç–∞–¥–∏–∏ –≤–≤–æ–¥–∞ –ü—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ (–ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–ª–µ–Ω–∏—è)).',
                             do_add_button_back=True)


def statement_to_db(message):
    try:
        chat_id = message.chat.id

        connection = sqlite3.connect('./data_bases/statements_to_work.sqlite3')
        cursor = connection.cursor()

        cursor.execute("SELECT user_id FROM users WHERE tg_chat_id == ('%d')" % (int(chat_id)))
        user_tg_id = cursor.fetchone()
        cursor.execute("INSERT INTO statements (from_user, user_name, user_age, user_telephone, user_address, user_edu, "
                       "user_is_legal, user_language, user_ill, user_administration, user_department) "
                       "VALUES ('%d', '%s', '%d', '%s', '%s', '%s', '%d', '%d', '%d', '%s', '%s')"
                       % (
                           int(user_tg_id[0]),
                           str(users[chat_id].user_name),
                           int(users[chat_id].user_age),
                           str(users[chat_id].user_telephone),
                           str(users[chat_id].user_address),
                           str(users[chat_id].user_edu),
                           int(users[chat_id].user_is_legal),
                           int(users[chat_id].user_language),
                           int(users[chat_id].user_ill),
                           str(users[chat_id].user_administration),
                           str(users[chat_id].user_department)
                          )
                       )

        connection.commit()
        cursor.close()
        connection.close()

        markup_inline = types.InlineKeyboardMarkup()
        markup_inline.add(types.InlineKeyboardButton(text='üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data='stay_on_system'))
        bot.edit_message_text(chat_id=chat_id,
                              message_id=message.message_id,
                              text='‚úî –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!',
                              reply_markup=markup_inline)
    except Exception as e:
        return program_error(message=message,
                             text_hint=str(e) + ' /(–æ—à–∏–±–∫–∞ –Ω–∞ —Å—Ç–∞–¥–∏–∏ –∑–∞–Ω–µ—Å–µ–Ω–∏—è –≤–≤–µ–¥–µ–Ω–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –ë–î (–ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–ª–µ–Ω–∏—è)).',
                             do_add_button_back=True)


def statement_out_of_db(message):
    chat_id = message.chat.id
    markup_inline = types.InlineKeyboardMarkup()
    markup_inline.add(types.InlineKeyboardButton(text='üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data='stay_on_system'))
    bot.edit_message_text(chat_id=chat_id,
                          message_id=message.message_id,
                          text='‚ùå –û—Ç–º–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–ª–µ–Ω–∏—è.',
                          reply_markup=markup_inline)


def edit_statement_command(message):
    try:
        chat_id = message.chat.id
        connection = sqlite3.connect('./data_bases/statements_to_work.sqlite3')
        cursor = connection.cursor()

        cursor.execute("SELECT is_login, user_login FROM users WHERE tg_chat_id == ('%d');" % (int(chat_id)))
        is_user_login_from_db = cursor.fetchone()

        connection.commit()
        cursor.close()
        connection.close()

        if not is_user_login_from_db:
            markup_inline = types.InlineKeyboardMarkup()
            markup_inline.add(types.InlineKeyboardButton(text='‚ñ∂ –î–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è', callback_data='log_in'),
                              types.InlineKeyboardButton(text='‚ùå –ù–µ—Ç, –æ—Å—Ç–∞—Ç—å—Å—è', callback_data='back_to_start'))
            bot.send_message(chat_id=chat_id,
                             text=f'–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ! –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è?',
                             reply_markup=markup_inline)
        else:
            connection = sqlite3.connect('./data_bases/statements_to_work.sqlite3')
            cursor = connection.cursor()
            cursor.execute("SELECT user_id, user_type FROM users WHERE tg_chat_id == ('%d');" % (int(chat_id)))
            officer_id = cursor.fetchone()
            cursor.close()
            connection.close()

            if officer_id[1] == 'guest':
                bot.send_message(chat_id=chat_id, text='‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–ª–µ–Ω–∏–π!')
                return my_statements_command(message=message)
            elif officer_id[1] == 'officer':
                return edit_statement_from_officer(message=message, current_officer_id=officer_id[0], is_admin=False)
            elif officer_id[1] == 'admin':
                return edit_statement_from_officer(message=message, current_officer_id=officer_id[0], is_admin=True)
    except Exception as e:
        return program_error(message=message, text_hint=str(e) + ' /(–æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã \"edit_statement\").')


def edit_statement_from_officer(message, current_officer_id=None, is_admin=False):
    try:
        chat_id = message.chat.id
        connection = sqlite3.connect('./data_bases/statements_to_work.sqlite3')
        cursor = connection.cursor()
        if is_admin:
            cursor.execute("SELECT statement_id, user_name, user_age, user_telephone, user_address, user_edu, "
                           "user_is_legal, user_language, user_ill, user_administration, user_department FROM statements;")
            all_statements = cursor.fetchall()
            cursor.close()
            connection.close()
            if all_statements:
                info = '–í –ò–° –ø–æ—Å—Ç—É–ø–∏–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ –∑–∞—è–≤–ª–µ–Ω–∏—è:\n\n'
                for statement in all_statements:
                    info += (f'<b>ID –∑–∞—è–≤–ª–µ–Ω–∏—è</b>: <u>{statement[0]}</u>, '
                             f'<b>–ò–º—è</b>: <u>{statement[1]}</u>, <b>–í–æ–∑—Ä–∞—Å—Ç</b>: <u>{statement[2]}</u>, <b>–¢–µ–ª–µ—Ñ–æ–Ω</b>: <u>{statement[3]}</u>, '
                             f'<b>–ê–¥—Ä–µ—Å –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è</b>: <u>{statement[4]}</u>, <b>–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ</b>: <u>{statement[5]}</u>, '
                             f'<b>–Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ</b>: <u>{bool_to_text[statement[6]]}</u>, <b>–†—É—Å—Å–∫–∏–π</b>: <u>{bool_to_text[statement[7]]}</u>, '
                             f'<b>–ó–∞–±–æ–ª–µ–≤–∞–Ω–∏—è</b>: <u>{bool_to_text[statement[8]]}</u>, <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ</b>: <u>{statement[9]}</u>, '
                             f'<b>–û—Ç–¥–µ–ª</b>: <u>{statement[10]}</u>\n-\n')
                info = (info.rstrip())[:-2] + '\n\n'
                info += '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∫–æ–º –∑–∞—è–≤–∏—Ç–µ–ª–µ –í—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å? –í–≤–µ–¥–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ –µ–≥–æ \"ID\", –∞ –∑–∞—Ç–µ–º, —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å \"|\", –¥—Ä—É–≥–∏–µ –ø–æ–ª—è.'
                bot.send_message(chat_id=chat_id, text=info, parse_mode='html')
                bot.register_next_step_handler(message, take_info_from_officer, current_officer_id=current_officer_id,
                                               is_admin=is_admin)
            else:
                info = '–í –ò–° –µ—â–µ –Ω–µ –ø–æ—Å—Ç—É–ø–∞–ª–æ –∑–∞—è–≤–ª–µ–Ω–∏–π.'
                bot.send_message(chat_id=chat_id, text=info, parse_mode='html')
                return add_statement_command(message=message, is_start_bot=True)
        else:
            cursor.execute("SELECT officer_administration FROM officers WHERE officer_id == ('%d')" % (int(current_officer_id)))
            officer_administration = cursor.fetchone()
            cursor.execute("SELECT statement_id, user_name, user_age, user_telephone, user_address, user_edu, "
                           "user_is_legal, user_language, user_ill, user_administration, user_department FROM statements "
                           "WHERE user_administration == ('%s')"
                           % (
                               str(officer_administration[0]))
                           )
            current_officer_statements = cursor.fetchall()
            cursor.close()
            connection.close()
            if current_officer_statements:
                info = '–í –í–∞—à–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç—É–ø–∏–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ –∑–∞—è–≤–ª–µ–Ω–∏—è:\n\n'
                for statement in current_officer_statements:
                    info += (f'<b>ID –∑–∞—è–≤–ª–µ–Ω–∏—è</b>: <u>{statement[0]}</u>, '
                             f'<b>–ò–º—è</b>: <u>{statement[1]}</u>, <b>–í–æ–∑—Ä–∞—Å—Ç</b>: <u>{statement[2]}</u>, <b>–¢–µ–ª–µ—Ñ–æ–Ω</b>: <u>{statement[3]}</u>, '
                             f'<b>–ê–¥—Ä–µ—Å –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è</b>: <u>{statement[4]}</u>, <b>–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ</b>: <u>{statement[5]}</u>, '
                             f'<b>–Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ</b>: <u>{bool_to_text[statement[6]]}</u>, <b>–†—É—Å—Å–∫–∏–π</b>: <u>{bool_to_text[statement[7]]}</u>, '
                             f'<b>–ó–∞–±–æ–ª–µ–≤–∞–Ω–∏—è</b>: <u>{bool_to_text[statement[8]]}</u>, <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ</b>: <u>{statement[9]}</u>, '
                             f'<b>–û—Ç–¥–µ–ª</b>: <u>{statement[10]}</u>\n-\n')
                info = (info.rstrip())[:-2] + '\n\n'
                info += '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∫–æ–º –∑–∞—è–≤–∏—Ç–µ–ª–µ –í—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å? –í–≤–µ–¥–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ –µ–≥–æ \"ID\", –∞ –∑–∞—Ç–µ–º, —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å \"|\", –¥—Ä—É–≥–∏–µ –ø–æ–ª—è.'
                bot.send_message(chat_id=chat_id, text=info, parse_mode='html')
                bot.register_next_step_handler(message, take_info_from_officer, current_officer_id=current_officer_id,
                                               is_admin=is_admin)
            else:
                info = '–í –í–∞—à–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –µ—â–µ –Ω–µ –ø–æ—Å—Ç—É–ø–∞–ª–æ –∑–∞—è–≤–ª–µ–Ω–∏–π.'
                bot.send_message(chat_id=chat_id, text=info, parse_mode='html')
                return add_statement_command(message=message, is_start_bot=True)
    except Exception as e:
        return program_error(message=message,
                             text_hint=str(e) + ' /(–æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∑–∞—è–≤–ª–µ–Ω–∏–π).')


def take_info_from_officer(message, current_officer_id=None, is_admin=False):
    try:
        if message.text in commands_list:
            return current_command(message=message)
        else:
            chat_id = message.chat.id
            statement_to_edit = message.text
            statement_to_edit = statement_to_edit.split('|')
            if len(statement_to_edit) == 11:
                connection = sqlite3.connect('./data_bases/statements_to_work.sqlite3')
                cursor = connection.cursor()
                if is_admin:
                    cursor.execute(
                        "UPDATE statements SET user_name = ('%s'), user_age = ('%d'), user_telephone = ('%s'), user_address = ('%s'), "
                        "user_edu = ('%s'), user_is_legal = ('%d'), user_language = ('%d'), user_ill = ('%d'), "
                        "user_administration = ('%s'), user_department = ('%s') "
                        "WHERE statement_id == ('%d')"
                        % (str(statement_to_edit[1].strip()), int(statement_to_edit[2].strip()),
                           str(statement_to_edit[3].strip()),
                           str(statement_to_edit[4].strip()), str(statement_to_edit[5].strip()),
                           int(statement_to_edit[6].strip()),
                           int(statement_to_edit[7].strip()), int(statement_to_edit[8].strip()),
                           str(statement_to_edit[9].strip()),
                           str(statement_to_edit[10].strip()), int(statement_to_edit[0].strip())
                           )
                    )
                    connection.commit()
                    cursor.close()
                    connection.close()
                    bot.send_message(chat_id=chat_id, text='–ó–∞—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ!')
                    return edit_statement_command(message=message)
                else:
                    cursor.execute(
                        "SELECT officer_administration FROM officers WHERE officer_id == ('%d')" % (int(current_officer_id)))
                    is_right_officer_from_officers = cursor.fetchone()
                    cursor.execute(
                        "SELECT user_administration FROM statements WHERE statement_id == ('%d')" % (int(statement_to_edit[0].strip())))
                    is_right_officer_from_statements = cursor.fetchone()

                    if is_right_officer_from_officers[0] == is_right_officer_from_statements[0]:
                        cursor.execute(
                            "UPDATE statements SET user_name = ('%s'), user_age = ('%d'), user_telephone = ('%s'), user_address = ('%s'), "
                            "user_edu = ('%s'), user_is_legal = ('%d'), user_language = ('%d'), user_ill = ('%d'), "
                            "user_administration = ('%s'), user_department = ('%s') "
                            "WHERE statement_id == ('%d')"
                            % (str(statement_to_edit[1].strip()), int(statement_to_edit[2].strip()), str(statement_to_edit[3].strip()),
                               str(statement_to_edit[4].strip()), str(statement_to_edit[5].strip()), int(statement_to_edit[6].strip()),
                               int(statement_to_edit[7].strip()), int(statement_to_edit[8].strip()), str(statement_to_edit[9].strip()),
                               str(statement_to_edit[10].strip()), int(statement_to_edit[0].strip())
                               )
                        )
                        connection.commit()
                        cursor.close()
                        connection.close()
                        bot.send_message(chat_id=chat_id, text='–ó–∞—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ!')
                        return edit_statement_command(message=message)
                    else:
                        cursor.close()
                        connection.close()
                        bot.send_message(chat_id=chat_id, text='–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —á—É–∂–∏–µ –∑–∞—è–≤–ª–µ–Ω–∏—è!')
                        return edit_statement_from_officer(message=message, current_officer_id=current_officer_id, is_admin=is_admin)
            else:
                bot.send_message(chat_id=chat_id, text='–ó–∞–ø–æ–ª–Ω–µ–Ω—ã –Ω–µ –≤—Å–µ –ø–æ–ª—è!')
                return edit_statement_from_officer(message=message, current_officer_id=current_officer_id, is_admin=is_admin)
    except Exception as e:
        return program_error(message=message, text_hint=str(e) + ' /(–æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞—è–≤–ª–µ–Ω–∏–∏).')


def edit_user_command(message):
    try:
        chat_id = message.chat.id
        connection = sqlite3.connect('./data_bases/statements_to_work.sqlite3')
        cursor = connection.cursor()

        cursor.execute("SELECT user_id, user_type FROM users WHERE tg_chat_id == ('%d');" % (int(chat_id)))
        is_user_login_from_db = cursor.fetchone()

        connection.commit()
        cursor.close()
        connection.close()

        if not is_user_login_from_db:
            markup_inline = types.InlineKeyboardMarkup()
            markup_inline.add(types.InlineKeyboardButton(text='‚ñ∂ –î–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è', callback_data='log_in'),
                              types.InlineKeyboardButton(text='‚ùå –ù–µ—Ç, –æ—Å—Ç–∞—Ç—å—Å—è', callback_data='back_to_start'))
            bot.send_message(chat_id=chat_id,
                             text=f'–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ! –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è?',
                             reply_markup=markup_inline)
        else:
            if is_user_login_from_db[1] == 'guest' or is_user_login_from_db[1] == 'officer':
                bot.send_message(chat_id=chat_id, text='‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!')
                return my_statements_command(message=message)
            elif is_user_login_from_db[1] == 'admin':
                return edit_user(message=message, admin_id=is_user_login_from_db[0])
    except Exception as e:
        return program_error(message=message, text_hint=str(e) + ' /(–æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã \"edit_user\").')


def edit_user(message, admin_id=None):
    try:
        chat_id = message.chat.id
        info = '–°–≤–æ–¥–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö —Å–∏—Å—Ç–µ–º—ã:\n\n'
        connection = sqlite3.connect('./data_bases/statements_to_work.sqlite3')
        cursor = connection.cursor()
        cursor.execute("SELECT user_id, user_login, user_password, user_type, is_login, tg_chat_id FROM users")
        all_users = cursor.fetchall()
        for current_user in all_users:
            info += (f'<b>UserID</b>: <u>{current_user[0]}</u>, <b>UserLogin</b>: <u>{current_user[1]}</u>, <b>UserPassword</b>: <u>{current_user[2]}</u>, '
                     f'<b>UserType</b>: <u>{current_user[3]}</u>, <b>UserIsLogin</b>: <u>{bool_to_text[current_user[4]]}</u>, <b>UserTG</b>: <u>{current_user[5]}</u>\n-\n')
        info = (info.rstrip())[:-2] + '\n\n'
        info += (
            '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å? –í–≤–µ–¥–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ –µ–≥–æ \"UserID\", –∞ –∑–∞—Ç–µ–º, —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å \"|\", –¥—Ä—É–≥–∏–µ –ø–æ–ª—è:\n\n'
            ''
            'login - –ª—é–±–∞—è —Å—Ç—Ä–æ–∫–∞\n'
            'password - –ª—é–±–∞—è —Å—Ç—Ä–æ–∫–∞\n'
            'type - 1 (admin), 2 (officer), 3 (guest)\n'
            'is login - 0 (–Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ), 1 (–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ)\n'
            'tg - –ª—é–±–æ–µ —á–∏—Å–ª–æ')
        bot.send_message(chat_id=chat_id, text=info, parse_mode='html')
        bot.register_next_step_handler(message, edit_current_user, admin_id=admin_id)
    except Exception as e:
        return program_error(message=message,
                             text_hint=str(e) + ' /(–æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö —Å–∏—Å—Ç–µ–º—ã).')


def edit_current_user(message, admin_id=None):
    try:
        if message.text in commands_list:
            return current_command(message=message)
        else:
            chat_id = message.chat.id
            user_to_edit = message.text
            user_to_edit = user_to_edit.split('|')
            if len(user_to_edit) == 6:
                if (str(user_to_edit[0].strip()).isdigit() and (' ' not in str(user_to_edit[1].strip()))
                        and (' ' not in str(user_to_edit[2].strip())) and (
                                str(user_to_edit[3].strip()) in ['1', '2', '3'])
                        and (int(user_to_edit[4].strip()) in [0, 1]) and (user_to_edit[4].strip()).isdigit()):
                    connection = sqlite3.connect('./data_bases/statements_to_work.sqlite3')
                    cursor = connection.cursor()
                    cursor.execute(
                        "SELECT COUNT(*) FROM users WHERE user_login = ('%s')" % (str(user_to_edit[1].strip())))
                    count = cursor.fetchone()
                    if count[0] > 0:
                        bot.send_message(chat_id=chat_id,
                                         text='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º UserLogin —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ UserLogin.')
                        bot.register_next_step_handler(message, edit_current_user, admin_id=admin_id)
                    else:
                        cursor.execute(
                            "UPDATE users "
                            "SET user_login = ('%s'), user_password = ('%s'), user_type = ('%s'), is_login = ('%d'), tg_chat_id = ('%d') "
                            "WHERE user_id == ('%d')"
                            % (str(user_to_edit[1].strip()), str(user_to_edit[2].strip()),
                               types_of_users[int(user_to_edit[3].strip()) - 1],
                               int(user_to_edit[4].strip()), int(user_to_edit[5].strip()),
                               int(user_to_edit[0].strip())))
                        connection.commit()
                        cursor.close()
                        connection.close()
                        bot.send_message(chat_id=chat_id, text='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω!')
                        return edit_user(message=message, admin_id=admin_id)
                else:
                    bot.send_message(chat_id=chat_id,
                                     text='–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.')
                    bot.register_next_step_handler(message, edit_current_user, admin_id=admin_id)
            else:
                bot.send_message(chat_id=chat_id, text='–ó–∞–ø–æ–ª–Ω–µ–Ω—ã –Ω–µ –≤—Å–µ –ø–æ–ª—è!')
                return edit_user(message=message, admin_id=admin_id)
    except Exception as e:
        return program_error(message=message, text_hint=str(e) + ' /(–æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ).')


def add_administration_command(message):
    chat_id = message.chat.id
    connection = sqlite3.connect('./data_bases/statements_to_work.sqlite3')
    cursor = connection.cursor()

    cursor.execute("SELECT user_id, user_type FROM users WHERE tg_chat_id == ('%d');" % (int(chat_id)))
    is_user_login_from_db = cursor.fetchone()

    connection.commit()
    cursor.close()
    connection.close()

    if not is_user_login_from_db:
        markup_inline = types.InlineKeyboardMarkup()
        markup_inline.add(types.InlineKeyboardButton(text='‚ñ∂ –î–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è', callback_data='log_in'),
                          types.InlineKeyboardButton(text='‚ùå –ù–µ—Ç, –æ—Å—Ç–∞—Ç—å—Å—è', callback_data='back_to_start'))
        bot.send_message(chat_id=chat_id,
                         text=f'–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ! –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è?',
                         reply_markup=markup_inline)
    else:
        if is_user_login_from_db[1] == 'guest' or is_user_login_from_db[1] == 'officer':
            bot.send_message(chat_id=chat_id, text='‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–π!')
            return add_statement_command(message=message, is_start_bot=True)
        elif is_user_login_from_db[1] == 'admin':
            return add_administration(message=message)


def add_administration(message):
    chat_id = message.chat.id

    connection = sqlite3.connect('./data_bases/statements_to_work.sqlite3')
    cursor = connection.cursor()
    cursor.execute("SELECT user_login FROM users WHERE user_type == ('%s')" % 'officer')
    officers_logins = cursor.fetchall()
    cursor.close()
    connection.close()
    count = 1
    info = '–í –±–∞–∑–µ –µ—Å—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –ª–æ–≥–∏–Ω–∞–º–∏:\n\n'
    for current_login in officers_logins:
        info += f'{str(count)}. <u>{current_login[0]}</u>\n'
        count += 1
    info += '\n–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä—É—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å, –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>\"–õ–æ–≥–∏–Ω | –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ | –û—Ç–¥–µ–ª\"</b>.'
    bot.send_message(chat_id=chat_id, text=info, parse_mode='html')
    bot.register_next_step_handler(message, add_current_department)


def add_current_department(message):
    chat_id = message.chat.id

    if message.text in commands_list:
        return current_command(message=message)
    else:
        dept_to_edit = message.text
        dept_to_edit = dept_to_edit.split('|')
        if len(dept_to_edit) == 3:
            connection = sqlite3.connect('./data_bases/statements_to_work.sqlite3')
            cursor = connection.cursor()
            cursor.execute("SELECT user_id, user_type FROM users WHERE user_login == ('%s')" % (str(dept_to_edit[0].strip())))
            is_officer = cursor.fetchone()

            if is_officer[1] == 'officer':
                cursor.execute("INSERT INTO officers (officer_id, officer_administration, officer_department) "
                               "VALUES ('%d', '%s', '%s');"
                               % (int(is_officer[0]), str(dept_to_edit[1].strip()), str(dept_to_edit[2].strip())))
                connection.commit()
                cursor.close()
                connection.close()
                bot.send_message(chat_id=chat_id, text='–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã!')
                return add_statement_command(message=message, is_start_bot=True)
            else:
                bot.send_message(chat_id=chat_id, text='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –¥–∞–Ω–Ω—ã–º –ª–æ–≥–∏–Ω–æ–º –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º!')
                cursor.close()
                connection.close()
                return add_administration_command(message=message)
        else:
            bot.send_message(chat_id=chat_id, text='–ó–∞–ø–æ–ª–Ω–µ–Ω—ã –Ω–µ –≤—Å–µ –ø–æ–ª—è!')
            return add_administration_command(message=message)


def logout_button(message):
    try:
        chat_id = message.chat.id
        connection = sqlite3.connect('./data_bases/statements_to_work.sqlite3')
        cursor = connection.cursor()
        cursor.execute("SELECT user_login FROM users WHERE tg_chat_id == ('%d')" % (int(chat_id)))
        user_login_help = cursor.fetchone()
        cursor.execute("SELECT COUNT(user_login) FROM users WHERE user_login == ('%s')" % (str(user_login_help[0])))
        count = cursor.fetchone()

        if (count[0]) > 1:
            cursor.execute("DELETE FROM users WHERE tg_chat_id == ('%d')" % (int(chat_id)))
        else:
            cursor.execute(
                "UPDATE users SET is_login = False, tg_chat_id = {} WHERE tg_chat_id == {};".format(
                    int(default_tg_chat_id),
                    int(chat_id)))
        connection.commit()
        cursor.close()
        connection.close()

        return start_command(message=message, do_edit_message=True)
    except Exception as e:
        return program_error(message=message, text_hint=str(e) + ' /(–æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —Å–∏—Å—Ç–µ–º—ã).')


@bot.message_handler(content_types=['text'])
def text_from_user(message):
    chat_id = message.chat.id
    bot.send_message(chat_id=chat_id, text='–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.')


@bot.callback_query_handler(func=lambda callback: True)
def callback_message(callback):
    try:
        chat_id = callback.message.chat.id
        bot.clear_step_handler_by_chat_id(
            chat_id=chat_id)  # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É, —Ç–æ –≤—Å–µ —Å—Ç–µ–ø —Ö—ç–Ω–¥–ª–µ—Ä—ã –ø—Ä–µ–∫—Ä–∞—â–∞—é—Ç—Å—è

        if callback.data == 'sign_up':
            sign_up_in_system(callback.message, do_edit_message=True)
        elif callback.data == 'log_in':
            log_in_in_system(callback.message, do_edit_message=True)
        elif callback.data == 'input_other_login':
            sign_up_in_system(callback.message, do_edit_message=True)
        elif callback.data == 'back_to_start':
            start_command(callback.message, do_edit_message=True)

        elif callback.data == 'stay_on_system':
            my_statements_command(callback.message, do_edit_message=True)
        elif callback.data == 'log_out':
            logout_button(message=callback.message)

        elif callback.data == 'send_statement':
            statement_to_db(callback.message)
        elif callback.data == 'leave_statement':
            statement_out_of_db(callback.message)
    except Exception as e:
        return program_error(message=callback.message, text_hint=str(e) + ' /(–æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ InlineButton).')


if __name__ == '__main__':
    bot.infinity_polling()
